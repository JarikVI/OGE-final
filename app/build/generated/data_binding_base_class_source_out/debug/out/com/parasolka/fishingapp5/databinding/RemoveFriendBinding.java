// Generated by view binder compiler. Do not edit!
package com.parasolka.fishingapp5.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.parasolka.fishingapp5.R;
import de.hdodenhof.circleimageview.CircleImageView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class RemoveFriendBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final TextView sfriendidre;

  @NonNull
  public final CircleImageView sfriendimagere;

  @NonNull
  public final LinearLayout sfriendlinearre;

  @NonNull
  public final TextView sfriendnamere;

  @NonNull
  public final MaterialButton sfriendsharere;

  private RemoveFriendBinding(@NonNull RelativeLayout rootView, @NonNull TextView sfriendidre,
      @NonNull CircleImageView sfriendimagere, @NonNull LinearLayout sfriendlinearre,
      @NonNull TextView sfriendnamere, @NonNull MaterialButton sfriendsharere) {
    this.rootView = rootView;
    this.sfriendidre = sfriendidre;
    this.sfriendimagere = sfriendimagere;
    this.sfriendlinearre = sfriendlinearre;
    this.sfriendnamere = sfriendnamere;
    this.sfriendsharere = sfriendsharere;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static RemoveFriendBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static RemoveFriendBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.remove_friend, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static RemoveFriendBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.sfriendidre;
      TextView sfriendidre = ViewBindings.findChildViewById(rootView, id);
      if (sfriendidre == null) {
        break missingId;
      }

      id = R.id.sfriendimagere;
      CircleImageView sfriendimagere = ViewBindings.findChildViewById(rootView, id);
      if (sfriendimagere == null) {
        break missingId;
      }

      id = R.id.sfriendlinearre;
      LinearLayout sfriendlinearre = ViewBindings.findChildViewById(rootView, id);
      if (sfriendlinearre == null) {
        break missingId;
      }

      id = R.id.sfriendnamere;
      TextView sfriendnamere = ViewBindings.findChildViewById(rootView, id);
      if (sfriendnamere == null) {
        break missingId;
      }

      id = R.id.sfriendsharere;
      MaterialButton sfriendsharere = ViewBindings.findChildViewById(rootView, id);
      if (sfriendsharere == null) {
        break missingId;
      }

      return new RemoveFriendBinding((RelativeLayout) rootView, sfriendidre, sfriendimagere,
          sfriendlinearre, sfriendnamere, sfriendsharere);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
